// Code generated by sqlc. DO NOT EDIT.
// source: stage_extracted_articles.sql

package db

import (
	"context"
	"database/sql"
)

const createStageExtractedArticle = `-- name: CreateStageExtractedArticle :one
INSERT INTO stage_extracted_articles (
	article_id
  , entity
  , entity_type
  , counts 
) VALUES (
  $1, $2, $3, $4
)
RETURNING article_id, entity, entity_type, counts, created_at
`

type CreateStageExtractedArticleParams struct {
	ArticleID  int32          `json:"article_id"`
	Entity     sql.NullString `json:"entity"`
	EntityType sql.NullString `json:"entity_type"`
	Counts     int16          `json:"counts"`
}

func (q *Queries) CreateStageExtractedArticle(ctx context.Context, arg CreateStageExtractedArticleParams) (StageExtractedArticle, error) {
	row := q.queryRow(ctx, q.createStageExtractedArticleStmt, createStageExtractedArticle,
		arg.ArticleID,
		arg.Entity,
		arg.EntityType,
		arg.Counts,
	)
	var i StageExtractedArticle
	err := row.Scan(
		&i.ArticleID,
		&i.Entity,
		&i.EntityType,
		&i.Counts,
		&i.CreatedAt,
	)
	return i, err
}

const getStageExtractedArticle_ByArticleID = `-- name: GetStageExtractedArticle_ByArticleID :many
SELECT article_id, entity, entity_type, counts, created_at
FROM stage_extracted_articles
WHERE article_id = $1
`

func (q *Queries) GetStageExtractedArticle_ByArticleID(ctx context.Context, articleID int32) ([]StageExtractedArticle, error) {
	rows, err := q.query(ctx, q.getStageExtractedArticle_ByArticleIDStmt, getStageExtractedArticle_ByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StageExtractedArticle
	for rows.Next() {
		var i StageExtractedArticle
		if err := rows.Scan(
			&i.ArticleID,
			&i.Entity,
			&i.EntityType,
			&i.Counts,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
