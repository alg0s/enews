// Code generated by sqlc. DO NOT EDIT.
// source: article_entities.sql

package db

import (
	"context"
	"database/sql"
)

const createArticleEntities = `-- name: CreateArticleEntities :exec
INSERT INTO article_entities (
    article_id
    , entity
    , entity_type 
    , counts 
) VALUES (
    $1, $2, $3, $4
)
`

type CreateArticleEntitiesParams struct {
	ArticleID  int32          `json:"article_id"`
	Entity     sql.NullString `json:"entity"`
	EntityType sql.NullString `json:"entity_type"`
	Counts     int16          `json:"counts"`
}

func (q *Queries) CreateArticleEntities(ctx context.Context, arg CreateArticleEntitiesParams) error {
	_, err := q.exec(ctx, q.createArticleEntitiesStmt, createArticleEntities,
		arg.ArticleID,
		arg.Entity,
		arg.EntityType,
		arg.Counts,
	)
	return err
}

const getArticleEntities_ByArticleID = `-- name: GetArticleEntities_ByArticleID :many
SELECT id, article_id, entity, entity_type, counts, created_at
FROM article_entities 
WHERE article_id = $1
`

func (q *Queries) GetArticleEntities_ByArticleID(ctx context.Context, articleID int32) ([]ArticleEntity, error) {
	rows, err := q.query(ctx, q.getArticleEntities_ByArticleIDStmt, getArticleEntities_ByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ArticleEntity
	for rows.Next() {
		var i ArticleEntity
		if err := rows.Scan(
			&i.ID,
			&i.ArticleID,
			&i.Entity,
			&i.EntityType,
			&i.Counts,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNewArticleEntitiesFromStagedEntities = `-- name: InsertNewArticleEntitiesFromStagedEntities :exec
INSERT INTO unique_entities 
    ("name", entity_type)
    SELECT 
        se.entity
        , se.entity_type
    FROM 
        stage_extracted_entities se
            LEFT JOIN 
        unique_entities ue
            ON  se.entity = ue.name
                AND se.entity_type = ue.entity_type
    WHERE        
        ue.name IS NULL 
        AND ue.entity_type IS NULL 
    GROUP BY 
        se.entity
        , se.entity_type
`

func (q *Queries) InsertNewArticleEntitiesFromStagedEntities(ctx context.Context) error {
	_, err := q.exec(ctx, q.insertNewArticleEntitiesFromStagedEntitiesStmt, insertNewArticleEntitiesFromStagedEntities)
	return err
}
