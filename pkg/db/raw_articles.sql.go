// Code generated by sqlc. DO NOT EDIT.
// source: raw_articles.sql

package db

import (
	"context"
	"database/sql"
)

const getRawArticle = `-- name: GetRawArticle :many
SELECT added_id, src_id, article_type, img_url, title, publish_time, publish_date, category, author, content_raw, content_text, tags_raw, tags_text, summary, like_count, dislike_count, rating_count, viral_count, comment_count, topic_id, posted_at, created_at
FROM enews.raw_articles 
WHERE added_id = $1
`

func (q *Queries) GetRawArticle(ctx context.Context, addedID sql.NullString) ([]EnewsRawArticle, error) {
	rows, err := q.query(ctx, q.getRawArticleStmt, getRawArticle, addedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnewsRawArticle
	for rows.Next() {
		var i EnewsRawArticle
		if err := rows.Scan(
			&i.AddedID,
			&i.SrcID,
			&i.ArticleType,
			&i.ImgUrl,
			&i.Title,
			&i.PublishTime,
			&i.PublishDate,
			&i.Category,
			&i.Author,
			&i.ContentRaw,
			&i.ContentText,
			&i.TagsRaw,
			&i.TagsText,
			&i.Summary,
			&i.LikeCount,
			&i.DislikeCount,
			&i.RatingCount,
			&i.ViralCount,
			&i.CommentCount,
			&i.TopicID,
			&i.PostedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRawArticle_Limit = `-- name: GetRawArticle_Limit :many
SELECT added_id, src_id, article_type, img_url, title, publish_time, publish_date, category, author, content_raw, content_text, tags_raw, tags_text, summary, like_count, dislike_count, rating_count, viral_count, comment_count, topic_id, posted_at, created_at 
FROM enews.raw_articles
LIMIT $1
`

func (q *Queries) GetRawArticle_Limit(ctx context.Context, limit int32) ([]EnewsRawArticle, error) {
	rows, err := q.query(ctx, q.getRawArticle_LimitStmt, getRawArticle_Limit, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnewsRawArticle
	for rows.Next() {
		var i EnewsRawArticle
		if err := rows.Scan(
			&i.AddedID,
			&i.SrcID,
			&i.ArticleType,
			&i.ImgUrl,
			&i.Title,
			&i.PublishTime,
			&i.PublishDate,
			&i.Category,
			&i.Author,
			&i.ContentRaw,
			&i.ContentText,
			&i.TagsRaw,
			&i.TagsText,
			&i.Summary,
			&i.LikeCount,
			&i.DislikeCount,
			&i.RatingCount,
			&i.ViralCount,
			&i.CommentCount,
			&i.TopicID,
			&i.PostedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRawArticles = `-- name: ListRawArticles :many
SELECT added_id, src_id, article_type, img_url, title, publish_time, publish_date, category, author, content_raw, content_text, tags_raw, tags_text, summary, like_count, dislike_count, rating_count, viral_count, comment_count, topic_id, posted_at, created_at 
FROM enews.raw_articles
`

func (q *Queries) ListRawArticles(ctx context.Context) ([]EnewsRawArticle, error) {
	rows, err := q.query(ctx, q.listRawArticlesStmt, listRawArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnewsRawArticle
	for rows.Next() {
		var i EnewsRawArticle
		if err := rows.Scan(
			&i.AddedID,
			&i.SrcID,
			&i.ArticleType,
			&i.ImgUrl,
			&i.Title,
			&i.PublishTime,
			&i.PublishDate,
			&i.Category,
			&i.Author,
			&i.ContentRaw,
			&i.ContentText,
			&i.TagsRaw,
			&i.TagsText,
			&i.Summary,
			&i.LikeCount,
			&i.DislikeCount,
			&i.RatingCount,
			&i.ViralCount,
			&i.CommentCount,
			&i.TopicID,
			&i.PostedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
