// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAnnotatedArticleStmt, err = db.PrepareContext(ctx, createAnnotatedArticle); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAnnotatedArticle: %w", err)
	}
	if q.createArticleStmt, err = db.PrepareContext(ctx, createArticle); err != nil {
		return nil, fmt.Errorf("error preparing query CreateArticle: %w", err)
	}
	if q.createArticleEntitiesStmt, err = db.PrepareContext(ctx, createArticleEntities); err != nil {
		return nil, fmt.Errorf("error preparing query CreateArticleEntities: %w", err)
	}
	if q.createStageExtractedEntityStmt, err = db.PrepareContext(ctx, createStageExtractedEntity); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStageExtractedEntity: %w", err)
	}
	if q.createUniqueEntityStmt, err = db.PrepareContext(ctx, createUniqueEntity); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUniqueEntity: %w", err)
	}
	if q.deleteArticle_ByIDStmt, err = db.PrepareContext(ctx, deleteArticle_ByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteArticle_ByID: %w", err)
	}
	if q.getAnnotatedArticlesStmt, err = db.PrepareContext(ctx, getAnnotatedArticles); err != nil {
		return nil, fmt.Errorf("error preparing query GetAnnotatedArticles: %w", err)
	}
	if q.getAnnotatedArticles_ByIDStmt, err = db.PrepareContext(ctx, getAnnotatedArticles_ByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAnnotatedArticles_ByID: %w", err)
	}
	if q.getArticleEntities_ByArticleIDStmt, err = db.PrepareContext(ctx, getArticleEntities_ByArticleID); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticleEntities_ByArticleID: %w", err)
	}
	if q.getArticle_ByIDStmt, err = db.PrepareContext(ctx, getArticle_ByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticle_ByID: %w", err)
	}
	if q.getArticle_ByListIDStmt, err = db.PrepareContext(ctx, getArticle_ByListID); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticle_ByListID: %w", err)
	}
	if q.getArticlesStmt, err = db.PrepareContext(ctx, getArticles); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticles: %w", err)
	}
	if q.getArticles_LimitStmt, err = db.PrepareContext(ctx, getArticles_Limit); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticles_Limit: %w", err)
	}
	if q.getEntityType_ByNameStmt, err = db.PrepareContext(ctx, getEntityType_ByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntityType_ByName: %w", err)
	}
	if q.getRawArticleStmt, err = db.PrepareContext(ctx, getRawArticle); err != nil {
		return nil, fmt.Errorf("error preparing query GetRawArticle: %w", err)
	}
	if q.getRawArticle_LimitStmt, err = db.PrepareContext(ctx, getRawArticle_Limit); err != nil {
		return nil, fmt.Errorf("error preparing query GetRawArticle_Limit: %w", err)
	}
	if q.getStageExtractedEntities_ByArticleIDStmt, err = db.PrepareContext(ctx, getStageExtractedEntities_ByArticleID); err != nil {
		return nil, fmt.Errorf("error preparing query GetStageExtractedEntities_ByArticleID: %w", err)
	}
	if q.getUniqueEntities_ByNameStmt, err = db.PrepareContext(ctx, getUniqueEntities_ByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUniqueEntities_ByName: %w", err)
	}
	if q.getUniqueEntities_ByName_TypeStmt, err = db.PrepareContext(ctx, getUniqueEntities_ByName_Type); err != nil {
		return nil, fmt.Errorf("error preparing query GetUniqueEntities_ByName_Type: %w", err)
	}
	if q.getUniqueEntities_ByTypeStmt, err = db.PrepareContext(ctx, getUniqueEntities_ByType); err != nil {
		return nil, fmt.Errorf("error preparing query GetUniqueEntities_ByType: %w", err)
	}
	if q.getUnprocessedArticleIDStmt, err = db.PrepareContext(ctx, getUnprocessedArticleID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUnprocessedArticleID: %w", err)
	}
	if q.insertNewArticleEntitiesFromStagedEntitiesStmt, err = db.PrepareContext(ctx, insertNewArticleEntitiesFromStagedEntities); err != nil {
		return nil, fmt.Errorf("error preparing query InsertNewArticleEntitiesFromStagedEntities: %w", err)
	}
	if q.insertNewEntitiesFromStagedEntitiesStmt, err = db.PrepareContext(ctx, insertNewEntitiesFromStagedEntities); err != nil {
		return nil, fmt.Errorf("error preparing query InsertNewEntitiesFromStagedEntities: %w", err)
	}
	if q.listRawArticlesStmt, err = db.PrepareContext(ctx, listRawArticles); err != nil {
		return nil, fmt.Errorf("error preparing query ListRawArticles: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAnnotatedArticleStmt != nil {
		if cerr := q.createAnnotatedArticleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAnnotatedArticleStmt: %w", cerr)
		}
	}
	if q.createArticleStmt != nil {
		if cerr := q.createArticleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createArticleStmt: %w", cerr)
		}
	}
	if q.createArticleEntitiesStmt != nil {
		if cerr := q.createArticleEntitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createArticleEntitiesStmt: %w", cerr)
		}
	}
	if q.createStageExtractedEntityStmt != nil {
		if cerr := q.createStageExtractedEntityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStageExtractedEntityStmt: %w", cerr)
		}
	}
	if q.createUniqueEntityStmt != nil {
		if cerr := q.createUniqueEntityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUniqueEntityStmt: %w", cerr)
		}
	}
	if q.deleteArticle_ByIDStmt != nil {
		if cerr := q.deleteArticle_ByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteArticle_ByIDStmt: %w", cerr)
		}
	}
	if q.getAnnotatedArticlesStmt != nil {
		if cerr := q.getAnnotatedArticlesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAnnotatedArticlesStmt: %w", cerr)
		}
	}
	if q.getAnnotatedArticles_ByIDStmt != nil {
		if cerr := q.getAnnotatedArticles_ByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAnnotatedArticles_ByIDStmt: %w", cerr)
		}
	}
	if q.getArticleEntities_ByArticleIDStmt != nil {
		if cerr := q.getArticleEntities_ByArticleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticleEntities_ByArticleIDStmt: %w", cerr)
		}
	}
	if q.getArticle_ByIDStmt != nil {
		if cerr := q.getArticle_ByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticle_ByIDStmt: %w", cerr)
		}
	}
	if q.getArticle_ByListIDStmt != nil {
		if cerr := q.getArticle_ByListIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticle_ByListIDStmt: %w", cerr)
		}
	}
	if q.getArticlesStmt != nil {
		if cerr := q.getArticlesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticlesStmt: %w", cerr)
		}
	}
	if q.getArticles_LimitStmt != nil {
		if cerr := q.getArticles_LimitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticles_LimitStmt: %w", cerr)
		}
	}
	if q.getEntityType_ByNameStmt != nil {
		if cerr := q.getEntityType_ByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntityType_ByNameStmt: %w", cerr)
		}
	}
	if q.getRawArticleStmt != nil {
		if cerr := q.getRawArticleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRawArticleStmt: %w", cerr)
		}
	}
	if q.getRawArticle_LimitStmt != nil {
		if cerr := q.getRawArticle_LimitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRawArticle_LimitStmt: %w", cerr)
		}
	}
	if q.getStageExtractedEntities_ByArticleIDStmt != nil {
		if cerr := q.getStageExtractedEntities_ByArticleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStageExtractedEntities_ByArticleIDStmt: %w", cerr)
		}
	}
	if q.getUniqueEntities_ByNameStmt != nil {
		if cerr := q.getUniqueEntities_ByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUniqueEntities_ByNameStmt: %w", cerr)
		}
	}
	if q.getUniqueEntities_ByName_TypeStmt != nil {
		if cerr := q.getUniqueEntities_ByName_TypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUniqueEntities_ByName_TypeStmt: %w", cerr)
		}
	}
	if q.getUniqueEntities_ByTypeStmt != nil {
		if cerr := q.getUniqueEntities_ByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUniqueEntities_ByTypeStmt: %w", cerr)
		}
	}
	if q.getUnprocessedArticleIDStmt != nil {
		if cerr := q.getUnprocessedArticleIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUnprocessedArticleIDStmt: %w", cerr)
		}
	}
	if q.insertNewArticleEntitiesFromStagedEntitiesStmt != nil {
		if cerr := q.insertNewArticleEntitiesFromStagedEntitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertNewArticleEntitiesFromStagedEntitiesStmt: %w", cerr)
		}
	}
	if q.insertNewEntitiesFromStagedEntitiesStmt != nil {
		if cerr := q.insertNewEntitiesFromStagedEntitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertNewEntitiesFromStagedEntitiesStmt: %w", cerr)
		}
	}
	if q.listRawArticlesStmt != nil {
		if cerr := q.listRawArticlesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRawArticlesStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                             DBTX
	tx                                             *sql.Tx
	createAnnotatedArticleStmt                     *sql.Stmt
	createArticleStmt                              *sql.Stmt
	createArticleEntitiesStmt                      *sql.Stmt
	createStageExtractedEntityStmt                 *sql.Stmt
	createUniqueEntityStmt                         *sql.Stmt
	deleteArticle_ByIDStmt                         *sql.Stmt
	getAnnotatedArticlesStmt                       *sql.Stmt
	getAnnotatedArticles_ByIDStmt                  *sql.Stmt
	getArticleEntities_ByArticleIDStmt             *sql.Stmt
	getArticle_ByIDStmt                            *sql.Stmt
	getArticle_ByListIDStmt                        *sql.Stmt
	getArticlesStmt                                *sql.Stmt
	getArticles_LimitStmt                          *sql.Stmt
	getEntityType_ByNameStmt                       *sql.Stmt
	getRawArticleStmt                              *sql.Stmt
	getRawArticle_LimitStmt                        *sql.Stmt
	getStageExtractedEntities_ByArticleIDStmt      *sql.Stmt
	getUniqueEntities_ByNameStmt                   *sql.Stmt
	getUniqueEntities_ByName_TypeStmt              *sql.Stmt
	getUniqueEntities_ByTypeStmt                   *sql.Stmt
	getUnprocessedArticleIDStmt                    *sql.Stmt
	insertNewArticleEntitiesFromStagedEntitiesStmt *sql.Stmt
	insertNewEntitiesFromStagedEntitiesStmt        *sql.Stmt
	listRawArticlesStmt                            *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                             tx,
		tx:                                             tx,
		createAnnotatedArticleStmt:                     q.createAnnotatedArticleStmt,
		createArticleStmt:                              q.createArticleStmt,
		createArticleEntitiesStmt:                      q.createArticleEntitiesStmt,
		createStageExtractedEntityStmt:                 q.createStageExtractedEntityStmt,
		createUniqueEntityStmt:                         q.createUniqueEntityStmt,
		deleteArticle_ByIDStmt:                         q.deleteArticle_ByIDStmt,
		getAnnotatedArticlesStmt:                       q.getAnnotatedArticlesStmt,
		getAnnotatedArticles_ByIDStmt:                  q.getAnnotatedArticles_ByIDStmt,
		getArticleEntities_ByArticleIDStmt:             q.getArticleEntities_ByArticleIDStmt,
		getArticle_ByIDStmt:                            q.getArticle_ByIDStmt,
		getArticle_ByListIDStmt:                        q.getArticle_ByListIDStmt,
		getArticlesStmt:                                q.getArticlesStmt,
		getArticles_LimitStmt:                          q.getArticles_LimitStmt,
		getEntityType_ByNameStmt:                       q.getEntityType_ByNameStmt,
		getRawArticleStmt:                              q.getRawArticleStmt,
		getRawArticle_LimitStmt:                        q.getRawArticle_LimitStmt,
		getStageExtractedEntities_ByArticleIDStmt:      q.getStageExtractedEntities_ByArticleIDStmt,
		getUniqueEntities_ByNameStmt:                   q.getUniqueEntities_ByNameStmt,
		getUniqueEntities_ByName_TypeStmt:              q.getUniqueEntities_ByName_TypeStmt,
		getUniqueEntities_ByTypeStmt:                   q.getUniqueEntities_ByTypeStmt,
		getUnprocessedArticleIDStmt:                    q.getUnprocessedArticleIDStmt,
		insertNewArticleEntitiesFromStagedEntitiesStmt: q.insertNewArticleEntitiesFromStagedEntitiesStmt,
		insertNewEntitiesFromStagedEntitiesStmt:        q.insertNewEntitiesFromStagedEntitiesStmt,
		listRawArticlesStmt:                            q.listRawArticlesStmt,
	}
}
