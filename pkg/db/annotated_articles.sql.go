// Code generated by sqlc. DO NOT EDIT.
// source: annotated_articles.sql

package db

import (
	"context"
)

const createAnnotatedArticle = `-- name: CreateAnnotatedArticle :exec
INSERT INTO annotated_articles (
    article_id
    , annotation
) VALUES (
    $1, $2 
)
`

type CreateAnnotatedArticleParams struct {
	ArticleID  int32  `json:"article_id"`
	Annotation string `json:"annotation"`
}

func (q *Queries) CreateAnnotatedArticle(ctx context.Context, arg CreateAnnotatedArticleParams) error {
	_, err := q.exec(ctx, q.createAnnotatedArticleStmt, createAnnotatedArticle, arg.ArticleID, arg.Annotation)
	return err
}

const getAnnotatedArticles = `-- name: GetAnnotatedArticles :many
SELECT article_id, annotation, created_at 
FROM annotated_articles
`

func (q *Queries) GetAnnotatedArticles(ctx context.Context) ([]AnnotatedArticle, error) {
	rows, err := q.query(ctx, q.getAnnotatedArticlesStmt, getAnnotatedArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnnotatedArticle
	for rows.Next() {
		var i AnnotatedArticle
		if err := rows.Scan(&i.ArticleID, &i.Annotation, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAnnotatedArticles_ByID = `-- name: GetAnnotatedArticles_ByID :one
SELECT article_id, annotation, created_at
FROM annotated_articles
WHERE article_id = $1
`

func (q *Queries) GetAnnotatedArticles_ByID(ctx context.Context, articleID int32) (AnnotatedArticle, error) {
	row := q.queryRow(ctx, q.getAnnotatedArticles_ByIDStmt, getAnnotatedArticles_ByID, articleID)
	var i AnnotatedArticle
	err := row.Scan(&i.ArticleID, &i.Annotation, &i.CreatedAt)
	return i, err
}
