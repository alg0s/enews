// Code generated by sqlc. DO NOT EDIT.
// source: stage_extracted_entities.sql

package db

import (
	"context"
	"database/sql"
)

const createStageExtractedEntity = `-- name: CreateStageExtractedEntity :exec
INSERT INTO stage_extracted_entities (
	article_id
  , entity
  , entity_type
  , counts 
) VALUES (
  $1, $2, $3, $4
)
RETURNING article_id, entity, entity_type, counts, created_at
`

type CreateStageExtractedEntityParams struct {
	ArticleID  int32          `json:"article_id"`
	Entity     sql.NullString `json:"entity"`
	EntityType sql.NullString `json:"entity_type"`
	Counts     int16          `json:"counts"`
}

func (q *Queries) CreateStageExtractedEntity(ctx context.Context, arg CreateStageExtractedEntityParams) error {
	_, err := q.exec(ctx, q.createStageExtractedEntityStmt, createStageExtractedEntity,
		arg.ArticleID,
		arg.Entity,
		arg.EntityType,
		arg.Counts,
	)
	return err
}

const getStageExtractedEntities_ByArticleID = `-- name: GetStageExtractedEntities_ByArticleID :many
SELECT 
  article_id, entity, entity_type, counts, created_at
FROM 
  stage_extracted_entities
WHERE 
  article_id = $1
`

func (q *Queries) GetStageExtractedEntities_ByArticleID(ctx context.Context, articleID int32) ([]StageExtractedEntity, error) {
	rows, err := q.query(ctx, q.getStageExtractedEntities_ByArticleIDStmt, getStageExtractedEntities_ByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StageExtractedEntity
	for rows.Next() {
		var i StageExtractedEntity
		if err := rows.Scan(
			&i.ArticleID,
			&i.Entity,
			&i.EntityType,
			&i.Counts,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
